# -*- coding: utf-8 -*-
# Generated by Django 1.10.4 on 2017-02-08 12:10
from __future__ import unicode_literals

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django_crypto_fields.fields.encrypted_char_field
import django_crypto_fields.fields.encrypted_text_field
import django_revision.revision_field
import edc_base.model_fields.hostname_modification_field
import edc_base.model_fields.userfield
import edc_base.model_fields.uuid_auto_field
import edc_base.model_validators.date
import edc_base.utils
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('plot', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='HistoricalHousehold',
            fields=[
                ('created', models.DateTimeField(
                    blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(
                    blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(
                    blank=True, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(
                    blank=True, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default='mac2-2.local',
                                                      help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(
                    blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False,
                                                                          help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(
                    blank=True, db_index=True, editable=False, help_text='System auto field. UUID primary key.')),
                ('household_identifier', models.CharField(
                    db_index=True, editable=False, max_length=25, verbose_name='Household Identifier')),
                ('household_sequence', models.IntegerField(
                    editable=False, help_text='is 1 for first household in plot, 2 for second, 3, etc. Embedded in household identifier.', null=True)),
                ('report_datetime', models.DateTimeField(
                    default=edc_base.utils.get_utcnow, verbose_name='Report Date/Time')),
                ('comment', django_crypto_fields.fields.encrypted_text_field.EncryptedTextField(
                    blank=True, help_text='You may provide a comment here or leave BLANK. (Encryption: AES local)', max_length=250, null=True)),
                ('enrolled', models.BooleanField(default=False, editable=False,
                                                 help_text='Set to true if one member is consented. Updated by Household_structure post_save.')),
                ('enrolled_datetime', models.DateTimeField(
                    editable=False, help_text='datetime that household is enrolled. Updated by Household_structure post_save.', null=True)),
                ('history_date', models.DateTimeField()),
                ('history_type', models.CharField(
                    choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(
                    primary_key=True, serialize=False)),
                ('history_user', models.ForeignKey(
                    null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('plot', models.ForeignKey(blank=True, db_constraint=False, null=True,
                                           on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='plot.Plot')),
            ],
            options={
                'get_latest_by': 'history_date',
                'ordering': ('-history_date', '-history_id'),
                'verbose_name': 'historical household',
            },
        ),
        migrations.CreateModel(
            name='HistoricalHouseholdAssessment',
            fields=[
                ('created', models.DateTimeField(
                    blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(
                    blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(
                    blank=True, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(
                    blank=True, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default='mac2-2.local',
                                                      help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(
                    blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False,
                                                                          help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(
                    blank=True, db_index=True, editable=False, help_text='System auto field. UUID primary key.')),
                ('report_datetime', models.DateTimeField(default=edc_base.utils.get_utcnow, validators=[
                 edc_base.model_validators.date.datetime_not_future], verbose_name='Report date')),
                ('potential_eligibles', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('Dont_know', 'Do not Know')], max_length=25, null=True,
                                                         verbose_name='Research Assistant: From speaking with the respondent, is at least onemember of this plot potentially eligible?')),
                ('eligibles_last_seen_home', models.CharField(blank=True, choices=[('seasonally_nearly_present', 'spent at least 4 weeks in household over the course of the past year'), (
                    'rarely_or_never_occupied', 'pent less than 4 weeks in the household  over the course of thepast year, or never occupied over the course of the past year'), ('unknown', "Don't know")], max_length=25, null=True, verbose_name='When was a resident last seen in this household?')),
                ('history_date', models.DateTimeField()),
                ('history_type', models.CharField(
                    choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(
                    primary_key=True, serialize=False)),
                ('history_user', models.ForeignKey(
                    null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'get_latest_by': 'history_date',
                'ordering': ('-history_date', '-history_id'),
                'verbose_name': 'historical Household Residency Status',
            },
        ),
        migrations.CreateModel(
            name='HistoricalHouseholdLog',
            fields=[
                ('created', models.DateTimeField(
                    blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(
                    blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(
                    blank=True, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(
                    blank=True, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default='mac2-2.local',
                                                      help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(
                    blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False,
                                                                          help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(
                    blank=True, db_index=True, editable=False, help_text='System auto field. UUID primary key.')),
                ('report_datetime', models.DateTimeField(default=edc_base.utils.get_utcnow, validators=[
                 edc_base.model_validators.date.datetime_not_future], verbose_name='Report date')),
                ('history_date', models.DateTimeField()),
                ('history_type', models.CharField(
                    choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(
                    primary_key=True, serialize=False)),
                ('history_user', models.ForeignKey(
                    null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'get_latest_by': 'history_date',
                'ordering': ('-history_date', '-history_id'),
                'verbose_name': 'historical household log',
            },
        ),
        migrations.CreateModel(
            name='HistoricalHouseholdLogEntry',
            fields=[
                ('created', models.DateTimeField(
                    blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(
                    blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(
                    blank=True, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(
                    blank=True, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default='mac2-2.local',
                                                      help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(
                    blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False,
                                                                          help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(
                    blank=True, db_index=True, editable=False, help_text='System auto field. UUID primary key.')),
                ('survey_schedule', models.CharField(
                    help_text='survey schedule name plus map_area', max_length=150)),
                ('report_datetime', models.DateTimeField(default=edc_base.utils.get_utcnow, validators=[
                 edc_base.model_validators.date.datetime_not_future], verbose_name='Report date')),
                ('household_status', models.CharField(choices=[('eligible_representative_present', 'Eligible Representative Present'), ('eligible_representative_absent', 'Eligible Representative Absent'), (
                    'no_household_informant', 'No Household Informant'), ('refused', 'Refused Enumeration')], max_length=50, null=True, verbose_name='Household Status')),
                ('next_appt_datetime', models.DateTimeField(
                    blank=True, help_text='The date and time to visit household again.', null=True, verbose_name='[RA]: When may we visit again?')),
                ('next_appt_datetime_source', models.CharField(blank=True, choices=[('neighbour', 'Neighbour'), ('household member', 'Household Member'), (
                    'hbc', 'Field RA'), ('other', 'Other')], help_text='source of information for the appointment date', max_length=25, null=True, verbose_name='Source')),
                ('comment', django_crypto_fields.fields.encrypted_text_field.EncryptedTextField(
                    blank=True, help_text=' (Encryption: AES local)', max_length=71, null=True)),
                ('history_date', models.DateTimeField()),
                ('history_type', models.CharField(
                    choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(
                    primary_key=True, serialize=False)),
                ('history_user', models.ForeignKey(
                    null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'get_latest_by': 'history_date',
                'ordering': ('-history_date', '-history_id'),
                'verbose_name': 'historical household log entry',
            },
        ),
        migrations.CreateModel(
            name='HistoricalHouseholdRefusal',
            fields=[
                ('created', models.DateTimeField(
                    blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(
                    blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(
                    blank=True, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(
                    blank=True, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default='mac2-2.local',
                                                      help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(
                    blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False,
                                                                          help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(
                    blank=True, db_index=True, editable=False, help_text='System auto field. UUID primary key.')),
                ('report_datetime', models.DateTimeField(default=edc_base.utils.get_utcnow, validators=[
                 edc_base.model_validators.date.datetime_not_future], verbose_name='Report date')),
                ('reason', models.CharField(choices=[('not_interested', 'Not Interested'), ('does_not_have_time', 'Does not have time'), (
                    'DWTA', "Don't want to answer"), ('OTHER', 'Other')], max_length=25, verbose_name='Please indicate the reason the household cannot be enumerated')),
                ('reason_other', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(
                    blank=True, help_text=' (Encryption: RSA local)', max_length=100, null=True, verbose_name='If Other, specify')),
                ('comment', django_crypto_fields.fields.encrypted_text_field.EncryptedTextField(
                    blank=True, help_text='You may provide a comment here or leave BLANK. (Encryption: AES local)', max_length=250, null=True)),
                ('history_date', models.DateTimeField()),
                ('history_type', models.CharField(
                    choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(
                    primary_key=True, serialize=False)),
                ('history_user', models.ForeignKey(
                    null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'get_latest_by': 'history_date',
                'ordering': ('-history_date', '-history_id'),
                'verbose_name': 'historical household refusal',
            },
        ),
        migrations.CreateModel(
            name='HistoricalHouseholdRefusalHistory',
            fields=[
                ('created', models.DateTimeField(
                    blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(
                    blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(
                    blank=True, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(
                    blank=True, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default='mac2-2.local',
                                                      help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(
                    blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False,
                                                                          help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(
                    blank=True, db_index=True, editable=False, help_text='System auto field. UUID primary key.')),
                ('report_datetime', models.DateTimeField(default=edc_base.utils.get_utcnow, validators=[
                 edc_base.model_validators.date.datetime_not_future], verbose_name='Report date')),
                ('reason', models.CharField(choices=[('not_interested', 'Not Interested'), ('does_not_have_time', 'Does not have time'), (
                    'DWTA', "Don't want to answer"), ('OTHER', 'Other')], max_length=25, verbose_name='Please indicate the reason the household cannot be enumerated')),
                ('reason_other', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(
                    blank=True, help_text=' (Encryption: RSA local)', max_length=100, null=True, verbose_name='If Other, specify')),
                ('comment', django_crypto_fields.fields.encrypted_text_field.EncryptedTextField(
                    blank=True, help_text='You may provide a comment here or leave BLANK. (Encryption: AES local)', max_length=250, null=True)),
                ('transaction', models.UUIDField(default=uuid.uuid4)),
                ('history_date', models.DateTimeField()),
                ('history_type', models.CharField(
                    choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(
                    primary_key=True, serialize=False)),
                ('history_user', models.ForeignKey(
                    null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'get_latest_by': 'history_date',
                'ordering': ('-history_date', '-history_id'),
                'verbose_name': 'historical household refusal history',
            },
        ),
        migrations.CreateModel(
            name='HistoricalHouseholdStructure',
            fields=[
                ('created', models.DateTimeField(
                    blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(
                    blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(
                    blank=True, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(
                    blank=True, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default='mac2-2.local',
                                                      help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(
                    blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False,
                                                                          help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(
                    blank=True, db_index=True, editable=False, help_text='System auto field. UUID primary key.')),
                ('enrolled', models.BooleanField(default=False, editable=False,
                                                 help_text='enrolled by the subject consent of a household_member')),
                ('enrolled_household_member', models.CharField(
                    editable=False, help_text='pk of consenting household_member that triggered the enroll', max_length=36, null=True)),
                ('enrolled_datetime', models.DateTimeField(
                    editable=False, help_text='datetime household_structure enrolled', null=True)),
                ('enumerated', models.BooleanField(default=False, editable=False,
                                                   help_text='Set to True when first household_member is enumerated')),
                ('enumerated_datetime', models.DateTimeField(null=True)),
                ('enumeration_attempts', models.IntegerField(default=0, editable=False,
                                                             help_text='Updated by a signal on HouseholdLogEntry. Number of attempts to enumerate a household_structure.')),
                ('failed_enumeration_attempts', models.IntegerField(default=0, editable=False,
                                                                    help_text='Updated by a signal on HouseholdLogEntry. Number of failed attempts toenumerate a household_structure.')),
                ('failed_enumeration', models.BooleanField(default=False, editable=False,
                                                           help_text='Updated by household assessment save method only')),
                ('refused_enumeration', models.BooleanField(
                    default=False, editable=False, help_text='Updated by household enumeration refusal form')),
                ('no_informant', models.BooleanField(default=False, editable=False,
                                                     help_text='Updated by household assessment save method only')),
                ('eligible_members', models.BooleanField(default=False, editable=False,
                                                         help_text='Updated by household member save method and post_delete')),
                ('survey_schedule', models.CharField(
                    help_text='survey schedule name plus map_area', max_length=150)),
                ('report_datetime', models.DateTimeField(
                    verbose_name='Report date')),
                ('progress', models.CharField(default='Not Started', editable=False,
                                              max_length=25, null=True, verbose_name='Progress')),
                ('note', models.CharField(
                    blank=True, max_length=250, verbose_name='Note')),
                ('history_date', models.DateTimeField()),
                ('history_type', models.CharField(
                    choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(
                    primary_key=True, serialize=False)),
                ('history_user', models.ForeignKey(
                    null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'get_latest_by': 'history_date',
                'ordering': ('-history_date', '-history_id'),
                'verbose_name': 'historical household structure',
            },
        ),
        migrations.CreateModel(
            name='HistoricalHouseholdWorkList',
            fields=[
                ('created', models.DateTimeField(
                    blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(
                    blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(
                    blank=True, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(
                    blank=True, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default='mac2-2.local',
                                                      help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(
                    blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False,
                                                                          help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(
                    blank=True, db_index=True, editable=False, help_text='System auto field. UUID primary key.')),
                ('report_datetime', models.DateTimeField(default=edc_base.utils.get_utcnow, validators=[
                 edc_base.model_validators.date.datetime_not_future], verbose_name='Report date')),
                ('label', models.CharField(
                    help_text='label to group, e.g. T1 prep', max_length=25)),
                ('visit_date', models.DateField(editable=False)),
                ('status', models.CharField(choices=[('scheduled', 'Scheduled'), ('missed_scheduled', 'Scheduled!!'), (
                    'unscheduled', 'Unscheduled'), ('incomplete', 'Incomplete'), ('done', 'Done')], editable=False, max_length=25)),
                ('appt_count', models.IntegerField(default=0, editable=False,
                                                   help_text='Number of currently scheduled appointments, including missed.')),
                ('enrolled_type', models.CharField(choices=[
                 ('hic', 'HIC/BHS'), ('bhs', 'BHS Only')], editable=False, max_length=3)),
                ('note', models.CharField(
                    blank=True, max_length=250, verbose_name='Note')),
                ('log_date', models.DateField(
                    editable=False, help_text='From household_log entries', null=True)),
                ('log_status', models.CharField(choices=[('eligible_representative_present', 'Eligible Representative Present'), ('eligible_representative_absent', 'Eligible Representative Absent'), (
                    'no_household_informant', 'No Household Informant'), ('refused', 'Refused Enumeration')], max_length=50, null=True, verbose_name='Household Status')),
                ('log_attempts', models.IntegerField(default=0)),
                ('members', models.IntegerField(default=0)),
                ('bhs', models.IntegerField(default=0)),
                ('hic', models.IntegerField(default=0)),
                ('history_date', models.DateTimeField()),
                ('history_type', models.CharField(
                    choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(
                    primary_key=True, serialize=False)),
                ('history_user', models.ForeignKey(
                    null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'get_latest_by': 'history_date',
                'ordering': ('-history_date', '-history_id'),
                'verbose_name': 'historical household work list',
            },
        ),
        migrations.CreateModel(
            name='Household',
            fields=[
                ('created', models.DateTimeField(
                    blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(
                    blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(
                    blank=True, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(
                    blank=True, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default='mac2-2.local',
                                                      help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(
                    blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False,
                                                                          help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False,
                                                                           help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('household_identifier', models.CharField(
                    editable=False, max_length=25, unique=True, verbose_name='Household Identifier')),
                ('household_sequence', models.IntegerField(
                    editable=False, help_text='is 1 for first household in plot, 2 for second, 3, etc. Embedded in household identifier.', null=True)),
                ('report_datetime', models.DateTimeField(
                    default=edc_base.utils.get_utcnow, verbose_name='Report Date/Time')),
                ('comment', django_crypto_fields.fields.encrypted_text_field.EncryptedTextField(
                    blank=True, help_text='You may provide a comment here or leave BLANK. (Encryption: AES local)', max_length=250, null=True)),
                ('enrolled', models.BooleanField(default=False, editable=False,
                                                 help_text='Set to true if one member is consented. Updated by Household_structure post_save.')),
                ('enrolled_datetime', models.DateTimeField(
                    editable=False, help_text='datetime that household is enrolled. Updated by Household_structure post_save.', null=True)),
                ('plot', models.ForeignKey(
                    on_delete=django.db.models.deletion.PROTECT, to='plot.Plot')),
            ],
            options={
                'ordering': ['-household_identifier'],
            },
        ),
        migrations.CreateModel(
            name='HouseholdAssessment',
            fields=[
                ('created', models.DateTimeField(
                    blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(
                    blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(
                    blank=True, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(
                    blank=True, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default='mac2-2.local',
                                                      help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(
                    blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False,
                                                                          help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False,
                                                                           help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('report_datetime', models.DateTimeField(default=edc_base.utils.get_utcnow, validators=[
                 edc_base.model_validators.date.datetime_not_future], verbose_name='Report date')),
                ('potential_eligibles', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('Dont_know', 'Do not Know')], max_length=25, null=True,
                                                         verbose_name='Research Assistant: From speaking with the respondent, is at least onemember of this plot potentially eligible?')),
                ('eligibles_last_seen_home', models.CharField(blank=True, choices=[('seasonally_nearly_present', 'spent at least 4 weeks in household over the course of the past year'), (
                    'rarely_or_never_occupied', 'pent less than 4 weeks in the household  over the course of thepast year, or never occupied over the course of the past year'), ('unknown', "Don't know")], max_length=25, null=True, verbose_name='When was a resident last seen in this household?')),
            ],
            options={
                'verbose_name_plural': 'Household Residency Status',
                'verbose_name': 'Household Residency Status',
            },
        ),
        migrations.CreateModel(
            name='HouseholdLog',
            fields=[
                ('created', models.DateTimeField(
                    blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(
                    blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(
                    blank=True, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(
                    blank=True, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default='mac2-2.local',
                                                      help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(
                    blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False,
                                                                          help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False,
                                                                           help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('report_datetime', models.DateTimeField(default=edc_base.utils.get_utcnow, validators=[
                 edc_base.model_validators.date.datetime_not_future], verbose_name='Report date')),
            ],
        ),
        migrations.CreateModel(
            name='HouseholdLogEntry',
            fields=[
                ('created', models.DateTimeField(
                    blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(
                    blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(
                    blank=True, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(
                    blank=True, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default='mac2-2.local',
                                                      help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(
                    blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False,
                                                                          help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False,
                                                                           help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('survey_schedule', models.CharField(
                    help_text='survey schedule name plus map_area', max_length=150)),
                ('report_datetime', models.DateTimeField(default=edc_base.utils.get_utcnow, validators=[
                 edc_base.model_validators.date.datetime_not_future], verbose_name='Report date')),
                ('household_status', models.CharField(choices=[('eligible_representative_present', 'Eligible Representative Present'), ('eligible_representative_absent', 'Eligible Representative Absent'), (
                    'no_household_informant', 'No Household Informant'), ('refused', 'Refused Enumeration')], max_length=50, null=True, verbose_name='Household Status')),
                ('next_appt_datetime', models.DateTimeField(
                    blank=True, help_text='The date and time to visit household again.', null=True, verbose_name='[RA]: When may we visit again?')),
                ('next_appt_datetime_source', models.CharField(blank=True, choices=[('neighbour', 'Neighbour'), ('household member', 'Household Member'), (
                    'hbc', 'Field RA'), ('other', 'Other')], help_text='source of information for the appointment date', max_length=25, null=True, verbose_name='Source')),
                ('comment', django_crypto_fields.fields.encrypted_text_field.EncryptedTextField(
                    blank=True, help_text=' (Encryption: AES local)', max_length=71, null=True)),
                ('household_log', models.ForeignKey(
                    on_delete=django.db.models.deletion.PROTECT, to='household.HouseholdLog')),
            ],
            options={
                'ordering': ('report_datetime',),
            },
        ),
        migrations.CreateModel(
            name='HouseholdRefusal',
            fields=[
                ('created', models.DateTimeField(
                    blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(
                    blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(
                    blank=True, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(
                    blank=True, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default='mac2-2.local',
                                                      help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(
                    blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False,
                                                                          help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False,
                                                                           help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('report_datetime', models.DateTimeField(default=edc_base.utils.get_utcnow, validators=[
                 edc_base.model_validators.date.datetime_not_future], verbose_name='Report date')),
                ('reason', models.CharField(choices=[('not_interested', 'Not Interested'), ('does_not_have_time', 'Does not have time'), (
                    'DWTA', "Don't want to answer"), ('OTHER', 'Other')], max_length=25, verbose_name='Please indicate the reason the household cannot be enumerated')),
                ('reason_other', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(
                    blank=True, help_text=' (Encryption: RSA local)', max_length=100, null=True, verbose_name='If Other, specify')),
                ('comment', django_crypto_fields.fields.encrypted_text_field.EncryptedTextField(
                    blank=True, help_text='You may provide a comment here or leave BLANK. (Encryption: AES local)', max_length=250, null=True)),
            ],
            options={
                'ordering': ['household_structure'],
            },
        ),
        migrations.CreateModel(
            name='HouseholdRefusalHistory',
            fields=[
                ('created', models.DateTimeField(
                    blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(
                    blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(
                    blank=True, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(
                    blank=True, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default='mac2-2.local',
                                                      help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(
                    blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False,
                                                                          help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False,
                                                                           help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('report_datetime', models.DateTimeField(default=edc_base.utils.get_utcnow, validators=[
                 edc_base.model_validators.date.datetime_not_future], verbose_name='Report date')),
                ('reason', models.CharField(choices=[('not_interested', 'Not Interested'), ('does_not_have_time', 'Does not have time'), (
                    'DWTA', "Don't want to answer"), ('OTHER', 'Other')], max_length=25, verbose_name='Please indicate the reason the household cannot be enumerated')),
                ('reason_other', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(
                    blank=True, help_text=' (Encryption: RSA local)', max_length=100, null=True, verbose_name='If Other, specify')),
                ('comment', django_crypto_fields.fields.encrypted_text_field.EncryptedTextField(
                    blank=True, help_text='You may provide a comment here or leave BLANK. (Encryption: AES local)', max_length=250, null=True)),
                ('transaction', models.UUIDField(default=uuid.uuid4)),
            ],
            options={
                'ordering': ['household_structure'],
            },
        ),
        migrations.CreateModel(
            name='HouseholdStructure',
            fields=[
                ('created', models.DateTimeField(
                    blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(
                    blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(
                    blank=True, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(
                    blank=True, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default='mac2-2.local',
                                                      help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(
                    blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False,
                                                                          help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False,
                                                                           help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('enrolled', models.BooleanField(default=False, editable=False,
                                                 help_text='enrolled by the subject consent of a household_member')),
                ('enrolled_household_member', models.CharField(
                    editable=False, help_text='pk of consenting household_member that triggered the enroll', max_length=36, null=True)),
                ('enrolled_datetime', models.DateTimeField(
                    editable=False, help_text='datetime household_structure enrolled', null=True)),
                ('enumerated', models.BooleanField(default=False, editable=False,
                                                   help_text='Set to True when first household_member is enumerated')),
                ('enumerated_datetime', models.DateTimeField(null=True)),
                ('enumeration_attempts', models.IntegerField(default=0, editable=False,
                                                             help_text='Updated by a signal on HouseholdLogEntry. Number of attempts to enumerate a household_structure.')),
                ('failed_enumeration_attempts', models.IntegerField(default=0, editable=False,
                                                                    help_text='Updated by a signal on HouseholdLogEntry. Number of failed attempts toenumerate a household_structure.')),
                ('failed_enumeration', models.BooleanField(default=False, editable=False,
                                                           help_text='Updated by household assessment save method only')),
                ('refused_enumeration', models.BooleanField(
                    default=False, editable=False, help_text='Updated by household enumeration refusal form')),
                ('no_informant', models.BooleanField(default=False, editable=False,
                                                     help_text='Updated by household assessment save method only')),
                ('eligible_members', models.BooleanField(default=False, editable=False,
                                                         help_text='Updated by household member save method and post_delete')),
                ('survey_schedule', models.CharField(
                    help_text='survey schedule name plus map_area', max_length=150)),
                ('report_datetime', models.DateTimeField(
                    verbose_name='Report date')),
                ('progress', models.CharField(default='Not Started', editable=False,
                                              max_length=25, null=True, verbose_name='Progress')),
                ('note', models.CharField(
                    blank=True, max_length=250, verbose_name='Note')),
                ('household', models.ForeignKey(
                    on_delete=django.db.models.deletion.PROTECT, to='household.Household')),
            ],
            options={
                'ordering': ('household', 'survey_schedule'),
            },
        ),
        migrations.CreateModel(
            name='HouseholdWorkList',
            fields=[
                ('created', models.DateTimeField(
                    blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(
                    blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(
                    blank=True, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(
                    blank=True, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default='mac2-2.local',
                                                      help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(
                    blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False,
                                                                          help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False,
                                                                           help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('report_datetime', models.DateTimeField(default=edc_base.utils.get_utcnow, validators=[
                 edc_base.model_validators.date.datetime_not_future], verbose_name='Report date')),
                ('label', models.CharField(
                    help_text='label to group, e.g. T1 prep', max_length=25)),
                ('visit_date', models.DateField(editable=False)),
                ('status', models.CharField(choices=[('scheduled', 'Scheduled'), ('missed_scheduled', 'Scheduled!!'), (
                    'unscheduled', 'Unscheduled'), ('incomplete', 'Incomplete'), ('done', 'Done')], editable=False, max_length=25)),
                ('appt_count', models.IntegerField(default=0, editable=False,
                                                   help_text='Number of currently scheduled appointments, including missed.')),
                ('enrolled_type', models.CharField(choices=[
                 ('hic', 'HIC/BHS'), ('bhs', 'BHS Only')], editable=False, max_length=3)),
                ('note', models.CharField(
                    blank=True, max_length=250, verbose_name='Note')),
                ('log_date', models.DateField(
                    editable=False, help_text='From household_log entries', null=True)),
                ('log_status', models.CharField(choices=[('eligible_representative_present', 'Eligible Representative Present'), ('eligible_representative_absent', 'Eligible Representative Absent'), (
                    'no_household_informant', 'No Household Informant'), ('refused', 'Refused Enumeration')], max_length=50, null=True, verbose_name='Household Status')),
                ('log_attempts', models.IntegerField(default=0)),
                ('members', models.IntegerField(default=0)),
                ('bhs', models.IntegerField(default=0)),
                ('hic', models.IntegerField(default=0)),
                ('household_structure', models.ForeignKey(
                    on_delete=django.db.models.deletion.PROTECT, to='household.HouseholdStructure')),
            ],
        ),
        migrations.AddField(
            model_name='householdrefusalhistory',
            name='household_structure',
            field=models.OneToOneField(
                on_delete=django.db.models.deletion.PROTECT, to='household.HouseholdStructure'),
        ),
        migrations.AddField(
            model_name='householdrefusal',
            name='household_structure',
            field=models.OneToOneField(
                on_delete=django.db.models.deletion.PROTECT, to='household.HouseholdStructure'),
        ),
        migrations.AddField(
            model_name='householdlog',
            name='household_structure',
            field=models.OneToOneField(
                on_delete=django.db.models.deletion.PROTECT, to='household.HouseholdStructure'),
        ),
        migrations.AddField(
            model_name='householdassessment',
            name='household_structure',
            field=models.OneToOneField(
                on_delete=django.db.models.deletion.PROTECT, to='household.HouseholdStructure'),
        ),
        migrations.AddField(
            model_name='historicalhouseholdworklist',
            name='household_structure',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True,
                                    on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='household.HouseholdStructure'),
        ),
        migrations.AddField(
            model_name='historicalhouseholdstructure',
            name='household',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True,
                                    on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='household.Household'),
        ),
        migrations.AddField(
            model_name='historicalhouseholdrefusalhistory',
            name='household_structure',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True,
                                    on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='household.HouseholdStructure'),
        ),
        migrations.AddField(
            model_name='historicalhouseholdrefusal',
            name='household_structure',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True,
                                    on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='household.HouseholdStructure'),
        ),
        migrations.AddField(
            model_name='historicalhouseholdlogentry',
            name='household_log',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True,
                                    on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='household.HouseholdLog'),
        ),
        migrations.AddField(
            model_name='historicalhouseholdlog',
            name='household_structure',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True,
                                    on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='household.HouseholdStructure'),
        ),
        migrations.AddField(
            model_name='historicalhouseholdassessment',
            name='household_structure',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True,
                                    on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='household.HouseholdStructure'),
        ),
        migrations.AlterUniqueTogether(
            name='householdworklist',
            unique_together=set([('household_structure', 'label')]),
        ),
        migrations.AlterUniqueTogether(
            name='householdstructure',
            unique_together=set([('household', 'survey_schedule')]),
        ),
        migrations.AlterUniqueTogether(
            name='householdlogentry',
            unique_together=set([('household_log', 'report_datetime')]),
        ),
    ]
